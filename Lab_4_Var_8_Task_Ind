#include <iostream>
#include <vector>
#include <limits>
#include <cmath>
using namespace std;
void processArray(const vector<double>& arr) {
    int minIndex = 0;
    double minValue = numeric_limits<double>::max();  
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] < minValue) {
            minValue = arr[i];
            minIndex = i;
        }
    }
    int firstNegIndex = -1;
    int secondNegIndex = -1;
    double sumBetweenNegatives = 0.0;

    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] < 0) {
            if (firstNegIndex == -1) {
                firstNegIndex = i;
            } else if (secondNegIndex == -1) {
                secondNegIndex = i;
                break;
            }
        }
    }

    if (firstNegIndex != -1 && secondNegIndex != -1) {
        for (int i = firstNegIndex + 1; i < secondNegIndex; ++i) {
            sumBetweenNegatives += arr[i];
        }
    }
    vector<double> transformedArray;
    vector<double> others;

    for (const auto& value : arr) {
        if (abs(value) <= 1) {
            transformedArray.push_back(value);
        } else {
            others.push_back(value);
        }
    }

    transformedArray.insert(transformedArray.end(), others.begin(), others.end());
    cout << "Номер минимального элемента: " << minIndex << endl;
    cout << "Сумма элементов между первым и вторым отрицательными элементами: " << sumBetweenNegatives << endl;
    cout << "Преобразованный массив: ";
    
    for (const auto& value : transformedArray) {
        cout << value << " ";
    }
    cout << endl;
}

int main() {
    vector<double> array = {1, 0.5, -1, -2, 3, -0.3};
    
    processArray(array);

    return 0;
}
